{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n// Custom hook for fetching jokes\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true); // Start with loading true\n  const [error, setError] = useState(null);\n  const getJoke = async () => {\n    try {\n      // Set loading state first, then clear other states\n      setLoading(true);\n      setError(null);\n      setData(null);\n\n      // Add a small delay to ensure state updates are processed\n      await new Promise(resolve => setTimeout(resolve, 10));\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"HTTP error! Status: \".concat(response.status));\n      }\n      const jokeData = await response.json();\n\n      // Set data first, then turn off loading\n      setData(jokeData);\n      await new Promise(resolve => setTimeout(resolve, 10));\n      setLoading(false);\n    } catch (err) {\n      // Handle error state\n      setData(null);\n      setError(err.message || 'Something went wrong');\n      setLoading(false);\n    }\n  };\n\n  // Fetch a joke when the component mounts\n  useEffect(() => {\n    getJoke();\n    // We only want to run this effect when the url changes\n    // getJoke is defined inside the component and would cause an infinite loop if included\n  }, [url]); // Dependency array includes url only\n\n  return {\n    data,\n    loading,\n    error,\n    getJoke\n  };\n};\n\n// Export the useFetch hook as a default export\n_s(useFetch, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","loading","setLoading","error","setError","getJoke","Promise","resolve","setTimeout","response","fetch","ok","Error","concat","status","jokeData","json","err","message"],"sources":["C:/Users/LENOVO/Downloads/Scaffold/Scaffold/src/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// Custom hook for fetching jokes\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true); // Start with loading true\r\n  const [error, setError] = useState(null);\r\n\r\n  const getJoke = async () => {\r\n    try {\r\n      // Set loading state first, then clear other states\r\n      setLoading(true);\r\n      setError(null);\r\n      setData(null);\r\n      \r\n      // Add a small delay to ensure state updates are processed\r\n      await new Promise(resolve => setTimeout(resolve, 10));\r\n      \r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      \r\n      const jokeData = await response.json();\r\n      \r\n      // Set data first, then turn off loading\r\n      setData(jokeData);\r\n      await new Promise(resolve => setTimeout(resolve, 10));\r\n      setLoading(false);\r\n    } catch (err) {\r\n      // Handle error state\r\n      setData(null);\r\n      setError(err.message || 'Something went wrong');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch a joke when the component mounts\r\n  useEffect(() => {\r\n    getJoke();\r\n    // We only want to run this effect when the url changes\r\n    // getJoke is defined inside the component and would cause an infinite loop if included\r\n  }, [url]); // Dependency array includes url only\r\n\r\n  return { data, loading, error, getJoke };\r\n};\r\n\r\n// Export the useFetch hook as a default export\r\nexport default useFetch;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMW,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF;MACAH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACdJ,OAAO,CAAC,IAAI,CAAC;;MAEb;MACA,MAAM,IAAIM,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,EAAE,CAAC,CAAC;MAErD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACb,GAAG,CAAC;MAEjC,IAAI,CAACY,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,wBAAAC,MAAA,CAAwBJ,QAAQ,CAACK,MAAM,CAAE,CAAC;MAC3D;MAEA,MAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;;MAEtC;MACAhB,OAAO,CAACe,QAAQ,CAAC;MACjB,MAAM,IAAIT,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,EAAE,CAAC,CAAC;MACrDL,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOe,GAAG,EAAE;MACZ;MACAjB,OAAO,CAAC,IAAI,CAAC;MACbI,QAAQ,CAACa,GAAG,CAACC,OAAO,IAAI,sBAAsB,CAAC;MAC/ChB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACAP,SAAS,CAAC,MAAM;IACdU,OAAO,CAAC,CAAC;IACT;IACA;EACF,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEX,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE,KAAK;IAAEE;EAAQ,CAAC;AAC1C,CAAC;;AAED;AAAAP,EAAA,CA7CMF,QAAQ;AA8Cd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}