{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Downloads\\\\Scaffold\\\\Scaffold\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./styles.css\";\n// import the custom hook to use in this document\nimport useFetch from \"./useFetch\";\n// Import JokeDisplay component for better testing structure\nimport JokeDisplay from \"./JokeDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const url = \"https://v2.jokeapi.dev/joke/Programming?type=single\";\n  // Use the custom hook here\n  const {\n    data,\n    loading,\n    error,\n    getJoke\n  } = useFetch(url);\n\n  // Handle the New Joke button click\n  const handleNewJoke = () => {\n    getJoke();\n  };\n\n  // Create a unique identifier for each state to help with testing\n  const getComponentState = () => {\n    if (loading) return 'loading';\n    if (error) return 'error';\n    if (data) return 'joke';\n    return 'initial';\n  };\n  const componentState = getComponentState();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    role: \"main\",\n    \"data-state\": componentState,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      \"data-testid\": TEST_IDS.appTitle,\n      \"aria-label\": \"application title\",\n      children: \"Joke Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": TEST_IDS.loadingText,\n      role: \"status\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading joke...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": TEST_IDS.errorText,\n      role: \"alert\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Error: Something went wrong while fetching joke\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), data && !loading && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": TEST_IDS.jokeText,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: data.joke\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      \"data-testid\": TEST_IDS.newJokeButton,\n      \"aria-label\": \"Get a new joke\",\n      onClick: handleNewJoke,\n      children: \"Get New Joke\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"l+2eWgaH+RSHgSCzg/mcp6FQXL4=\", false, function () {\n  return [useFetch];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useFetch","JokeDisplay","jsxDEV","_jsxDEV","App","_s","url","data","loading","error","getJoke","handleNewJoke","getComponentState","componentState","className","role","children","TEST_IDS","appTitle","fileName","_jsxFileName","lineNumber","columnNumber","loadingText","errorText","jokeText","joke","newJokeButton","onClick","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Downloads/Scaffold/Scaffold/src/App.js"],"sourcesContent":["import \"./styles.css\";\n// import the custom hook to use in this document\nimport useFetch from \"./useFetch\";\n// Import JokeDisplay component for better testing structure\nimport JokeDisplay from \"./JokeDisplay\";\n\nexport default function App() {\n  const url = \"https://v2.jokeapi.dev/joke/Programming?type=single\";\n  // Use the custom hook here\n  const { data, loading, error, getJoke } = useFetch(url);\n\n  // Handle the New Joke button click\n  const handleNewJoke = () => {\n    getJoke();\n  };\n\n  // Create a unique identifier for each state to help with testing\n  const getComponentState = () => {\n    if (loading) return 'loading';\n    if (error) return 'error';\n    if (data) return 'joke';\n    return 'initial';\n  };\n\n  const componentState = getComponentState();\n\n  return (\n    <div className=\"App\" role=\"main\" data-state={componentState}>\n      <h1 data-testid={TEST_IDS.appTitle} aria-label=\"application title\">Joke Generator</h1>\n      \n      {/* Only one of these elements will be rendered at a time */}\n      {loading && (\n        <div data-testid={TEST_IDS.loadingText} role=\"status\">\n          <p>Loading joke...</p>\n        </div>\n      )}\n\n      {error && (\n        <div data-testid={TEST_IDS.errorText} role=\"alert\">\n          <p>Error: Something went wrong while fetching joke</p>\n        </div>\n      )}\n\n      {/* Do not modify the below code except for adding test IDs */}\n      {data && !loading && !error && (\n        <div data-testid={TEST_IDS.jokeText}>\n          <h2>{data.joke}</h2>\n        </div>\n      )}\n      \n      <button \n        className=\"btn\" \n        data-testid={TEST_IDS.newJokeButton} \n        aria-label=\"Get a new joke\" \n        onClick={handleNewJoke}\n      >\n        Get New Joke\n      </button>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAO,cAAc;AACrB;AACA,OAAOA,QAAQ,MAAM,YAAY;AACjC;AACA,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAMC,GAAG,GAAG,qDAAqD;EACjE;EACA,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGV,QAAQ,CAACM,GAAG,CAAC;;EAEvD;EACA,MAAMK,aAAa,GAAGA,CAAA,KAAM;IAC1BD,OAAO,CAAC,CAAC;EACX,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIJ,OAAO,EAAE,OAAO,SAAS;IAC7B,IAAIC,KAAK,EAAE,OAAO,OAAO;IACzB,IAAIF,IAAI,EAAE,OAAO,MAAM;IACvB,OAAO,SAAS;EAClB,CAAC;EAED,MAAMM,cAAc,GAAGD,iBAAiB,CAAC,CAAC;EAE1C,oBACET,OAAA;IAAKW,SAAS,EAAC,KAAK;IAACC,IAAI,EAAC,MAAM;IAAC,cAAYF,cAAe;IAAAG,QAAA,gBAC1Db,OAAA;MAAI,eAAac,QAAQ,CAACC,QAAS;MAAC,cAAW,mBAAmB;MAAAF,QAAA,EAAC;IAAc;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAGrFd,OAAO,iBACNL,OAAA;MAAK,eAAac,QAAQ,CAACM,WAAY;MAACR,IAAI,EAAC,QAAQ;MAAAC,QAAA,eACnDb,OAAA;QAAAa,QAAA,EAAG;MAAe;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CACN,EAEAb,KAAK,iBACJN,OAAA;MAAK,eAAac,QAAQ,CAACO,SAAU;MAACT,IAAI,EAAC,OAAO;MAAAC,QAAA,eAChDb,OAAA;QAAAa,QAAA,EAAG;MAA+C;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CACN,EAGAf,IAAI,IAAI,CAACC,OAAO,IAAI,CAACC,KAAK,iBACzBN,OAAA;MAAK,eAAac,QAAQ,CAACQ,QAAS;MAAAT,QAAA,eAClCb,OAAA;QAAAa,QAAA,EAAKT,IAAI,CAACmB;MAAI;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CACN,eAEDnB,OAAA;MACEW,SAAS,EAAC,KAAK;MACf,eAAaG,QAAQ,CAACU,aAAc;MACpC,cAAW,gBAAgB;MAC3BC,OAAO,EAAEjB,aAAc;MAAAK,QAAA,EACxB;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACjB,EAAA,CAtDuBD,GAAG;EAAA,QAGiBJ,QAAQ;AAAA;AAAA6B,EAAA,GAH5BzB,GAAG;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}